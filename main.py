#!/usr/bin/env python3
# main.py

import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)

# –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
BOT_TOKEN = "YOUR_BOT_TOKEN"

# –ü—Ä–∏–º–µ—Ä—ã —É—Ä–æ–∫–æ–≤
lessons = {
    "1": "–£—Ä–æ–∫ 1: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö\n\n"
         "–í Python –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —á–∏—Å–ª–∞, —Å—Ç—Ä–æ–∫–∏ –∏ –¥—Ä.:\n"
         "x = 10        # —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ\n"
         "name = '–ê—Ä—Ç–µ–º'  # —Å—Ç—Ä–æ–∫–∞\n",
    "2": "–£—Ä–æ–∫ 2: –£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã\n\n"
         "if x > 5:\n"
         "    print('–ë–æ–ª—å—à–µ 5')\n"
         "else:\n"
         "    print('–ú–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 5')\n",
}

# –ü—Ä–∏–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
quiz = [
    {
        "question": "–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç:\n\nx = 3\ny = 4\nprint(x + y)",
        "answer": "7"
    },
    {
        "question": "–ö–∞–∫ –æ–±—ä—è–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑ —á–∏—Å–µ–ª 1, 2 –∏ 3?",
        "answer": "[1, 2, 3]"
    },
]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ chat_id
user_quiz_state = {}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ Python.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/lesson <–Ω–æ–º–µ—Ä> ‚Äì –ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫\n"
        "/quiz ‚Äì –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É\n"
        "/help ‚Äì —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/lesson <–Ω–æ–º–µ—Ä> ‚Äì —É—Ä–æ–∫ ‚Ññ\n"
        "/quiz ‚Äì –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞\n"
        "/help ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã"
    )


async def lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if not args or args[0] not in lessons:
        keys = ", ".join(lessons.keys())
        await update.message.reply_text(f"–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞. –î–æ—Å—Ç—É–ø–Ω–æ: {keys}")
        return
    text = lessons[args[0]]
    await update.message.reply_text(text)


async def quiz_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_quiz_state[chat_id] = 0
    q = quiz[0]["question"]
    await update.message.reply_text(f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞: –≤–æ–ø—Ä–æ—Å 1\n\n{q}")


async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in user_quiz_state:
        return  # –Ω–µ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ
    idx = user_quiz_state[chat_id]
    user_answer = update.message.text.strip()
    correct = quiz[idx]["answer"]
    if user_answer == correct:
        await update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚úÖ")
    else:
        await update.message.reply_text(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}")
    # —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    idx += 1
    if idx < len(quiz):
        user_quiz_state[chat_id] = idx
        q = quiz[idx]["question"]
        await update.message.reply_text(f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞: –≤–æ–ø—Ä–æ—Å {idx+1}\n\n{q}")
    else:
        await update.message.reply_text("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –¢—ã –º–æ–ª–æ–¥–µ—Ü üéâ")
        del user_quiz_state[chat_id]


def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("lesson", lesson))
    app.add_handler(CommandHandler("quiz", quiz_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer))

    app.run_polling()


if __name__ == "__main__":
    main()
